# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FNqG5fGxXe96Q1Z3fh8VNEciIDS4ee4i
"""

import pandas as pd

# Load the provided Excel file
file_path = '/content/neo.xlsx'
data = pd.read_excel(file_path)

# Display the first few rows to understand the structure of the data
data.head()

import matplotlib.pyplot as plt

# Plot the experimental and model stress-strain curves
plt.figure(figsize=(8,6))
plt.plot(data['Epsilon_exp'], data['Sigma_exp'], label='Experimental Data', marker='o', linestyle='-', color='blue')
plt.plot(data['Epsilon_model'], data['Sigma_model'], label='Neo-Hookean Model', marker='x', linestyle='--', color='red')

# Add labels and title
plt.title('Stress-Strain Curve: Experimental vs Neo-Hookean Model')
plt.xlabel('Strain (Epsilon)')
plt.ylabel('Stress (Sigma)')
plt.legend()
plt.grid(True)

# Show plot
plt.show()

import numpy as np
from sklearn.metrics import mean_squared_error

clean_data = data.dropna()

# Calculate RMSE between experimental and model stress values
rmse = np.sqrt(mean_squared_error(clean_data['Sigma_exp'], clean_data['Sigma_model']))
print(rmse)

# Load the new Excel file for the Mooney-Rivlin 2-term model
mooney_path = '/content/Mooney2.xlsx'
mooney_data = pd.read_excel(mooney_path)

# Display the first few rows to understand the structure of the Mooney-Rivlin model data
mooney_data.head()

# Plot the experimental and Mooney-Rivlin model stress-strain curves
plt.figure(figsize=(8,6))
plt.plot(mooney_data['Epsilon_exp'], mooney_data['Sigma_exp'], label='Experimental Data', marker='o', linestyle='-', color='blue')
plt.plot(mooney_data['Epsilon_model'], mooney_data['Sigma_mooney'], label='Mooney-Rivlin 2-Term Model', marker='x', linestyle='--', color='green')

# Add labels and title
plt.title('Stress-Strain Curve: Experimental vs Mooney-Rivlin 2-Term Model')
plt.xlabel('Strain (Epsilon)')
plt.ylabel('Stress (Sigma)')
plt.legend()
plt.grid(True)

# Show plot
plt.show()

# There are NaN values in the 'Sigma_mooney' column. We will remove the rows with NaN values before calculating RMSE.

# Drop rows where 'Sigma_mooney' is NaN
df_cleaned = mooney_data.dropna(subset=['Sigma_mooney'])

# Recalculate RMSE after cleaning the data
mse_cleaned = mean_squared_error(df_cleaned['Sigma_exp'], df_cleaned['Sigma_mooney'])
rmse_cleaned = np.sqrt(mse_cleaned)

rmse_cleaned